{"version":3,"sources":["components/Goodslist.tsx","App.tsx","index.tsx"],"names":["Goodslist","goods","useState","isReversed","setIsReversed","sortBy","setSortBy","lengthLimit","setLengthLimit","selectedGoods","filter","good","length","sort","good1","good2","localeCompare","reverse","className","classNames","type","onClick","prevState","htmlFor","value","name","onChange","event","target","map","item","goodsFromServer","App","isAppStarted","setIsAppStarted","ReactDOM","render","document","getElementById"],"mappings":"oNAQaA,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAwBMC,EAAgBR,EAAMS,QAAO,SAAAC,GACjC,OAAOA,EAAKC,QAAUL,KAsBxB,OAnBAE,EAAcI,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,IAAK,SACH,OAAOS,EAAMF,OAASG,EAAMH,OAG9B,IAAK,OACH,OAAOE,EAAME,cAAcD,GAE7B,QACE,OAAO,MAKTZ,GACFM,EAAcQ,UAId,qBAAKC,UAAU,SAAf,SACE,sBAAKA,UAAU,+DAAf,UAQE,oBAAIA,UAAU,sCAAd,2BAOA,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,wBACEA,UAAWC,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,KAAK,SACLC,QAAS,WAlEnBjB,GAAc,SAAAkB,GAAS,OAAKA,MA2DpB,uBAaF,qBAAKJ,UAAU,SAAf,SACE,wBACEA,UAAWC,IACT,SACA,aACA,CAAE,YAAwB,SAAXd,IAEjBe,KAAK,SACLC,QAAS,WAxEnBf,EAAU,SAiEF,mCAaF,qBAAKY,UAAU,SAAf,SACE,wBACEA,UAAWC,IACT,SACA,aACA,CAAE,YAAwB,WAAXd,IAEjBe,KAAK,SACLC,QAAS,WA1FnBf,EAAU,WAmFF,8BAaF,qBAAKY,UAAU,SAAf,SACE,wBACEA,UAAWC,IACT,SACA,aACA,CACE,YACGhB,GACe,SAAXE,GACW,WAAXA,GACAE,EAAc,IAGzBa,KAAK,SACLC,QAAS,kBAtGnBb,EAAe,GACfJ,GAAc,QACdE,EAAU,KAuFF,qBAmBF,qBAAKY,UAAU,SAAf,SACE,wBAAOK,QAAQ,GAAGL,UAAU,QAA5B,mBAEE,qBAAKA,UAAU,6BAAf,SACE,wBACEM,MAAOjB,EACPkB,KAAK,SACLC,SApIM,SAACC,GACrBnB,GAAgBmB,EAAMC,OAAOJ,QAoIfN,UAAU,SAJZ,SAMI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAIW,KAAI,SAAAC,GAAI,OACxC,wBAEEN,MAAOM,EAFT,SAIGA,GAHIA,kBAYnB,6BACGrB,EAAcoB,KAAI,SAAAlB,GACjB,OACE,6BACGA,GADMA,cCjKjBoB,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAkDaC,EA/CO,WACpB,MAAwC9B,oBAAS,GAAjD,mBAAO+B,EAAP,KAAqBC,EAArB,KAMA,OACE,qBAAKhB,UAAU,MAAf,SACKe,EAgCC,cAAC,EAAD,CAAWhC,MAAO8B,IA9BlB,qBAAKb,UAAU,gBAAf,SACE,sBAAKA,UAAU,yDAAf,UAME,oBAAIA,UAAU,sCAAd,2BAOA,wBACEA,UAAU,yDAMVE,KAAK,SACLC,QAAS,WA7BrBa,GAAgB,IAqBN,2BCvCdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.27335499.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport '../App.css';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const Goodslist: React.FC<Props> = ({ goods }) => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortBy, setSortBy] = useState('');\n  const [lengthLimit, setLengthLimit] = useState(1);\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setLengthLimit(+event.target.value);\n  };\n\n  const reverse = () => {\n    setIsReversed(prevState => !prevState);\n  };\n\n  const sortByLength = () => {\n    setSortBy('length');\n  };\n\n  const sortByName = () => {\n    setSortBy('name');\n  };\n\n  const reset = () => {\n    setLengthLimit(1);\n    setIsReversed(false);\n    setSortBy('');\n  };\n\n  const selectedGoods = goods.filter(good => {\n    return good.length >= lengthLimit;\n  });\n\n  selectedGoods.sort((good1, good2) => {\n    switch (sortBy) {\n      case 'length':\n        return good1.length - good2.length;\n        break;\n\n      case 'name':\n        return good1.localeCompare(good2);\n        break;\n      default:\n        return 0;\n        break;\n    }\n  });\n\n  if (isReversed) {\n    selectedGoods.reverse();\n  }\n\n  return (\n    <div className=\"colums\">\n      <div className=\"\n              card\n              column\n              is-half\n              is-offset-one-quarter\n              content is-large\n              \"\n      >\n        <h1 className=\"\n                contnet\n                is-large\n                has-text-centered\"\n        >\n          Choise Filter\n        </h1>\n        <div className=\"column columns\">\n          <div className=\"column\">\n            <button\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-danger': isReversed },\n              )}\n              type=\"button\"\n              onClick={() => reverse()}\n            >\n              Reverse\n            </button>\n\n          </div>\n          <div className=\"column\">\n            <button\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-danger': sortBy === 'name' },\n              )}\n              type=\"button\"\n              onClick={() => sortByName()}\n            >\n              Sort alphabetically\n            </button>\n\n          </div>\n          <div className=\"column\">\n            <button\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-danger': sortBy === 'length' },\n              )}\n              type=\"button\"\n              onClick={() => sortByLength()}\n            >\n              Sort by length\n            </button>\n\n          </div>\n          <div className=\"column\">\n            <button\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-danger':\n                     isReversed\n                      || sortBy === 'name'\n                      || sortBy === 'length'\n                      || lengthLimit > 1,\n                },\n              )}\n              type=\"button\"\n              onClick={() => reset()}\n            >\n              Reset\n            </button>\n\n          </div>\n          <div className=\"column\">\n            <label htmlFor=\"\" className=\"level\">\n              Length\n              <div className=\"select is-small is-rounded\">\n                <select\n                  value={lengthLimit}\n                  name=\"select\"\n                  onChange={selectHandler}\n                  className=\"select\"\n                >\n                  { [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(item => (\n                    <option\n                      key={item}\n                      value={item}\n                    >\n                      {item}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </label>\n          </div>\n\n        </div>\n        <ul>\n          {selectedGoods.map(good => {\n            return (\n              <li key={good}>\n                {good}\n              </li>\n            );\n          })}\n        </ul>\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Goodslist } from './components/Goodslist';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [isAppStarted, setIsAppStarted] = useState(false);\n\n  const handleAppStarted = () => {\n    setIsAppStarted(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {(!isAppStarted\n        ? (\n          <div className=\"columns  card\">\n            <div className=\"\n              column\n              is-half\n              is-offset-one-quarter\n              content is-large\"\n            >\n              <h1 className=\"\n                contnet\n                is-large\n                has-text-centered\"\n              >\n                List of goods\n              </h1>\n              <button\n                className=\"\n                  button\n                  is-large\n                  is-fullwidth\n                  is-responsive\n                  is-primary\"\n                type=\"button\"\n                onClick={() => handleAppStarted()}\n              >\n                Start\n              </button>\n            </div>\n\n          </div>\n        )\n        : <Goodslist goods={goodsFromServer} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}